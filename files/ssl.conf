# HTTPS Configuration
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl;

  # enables SSLv3/TLSv1, but not SSLv2 which is weak and should no longer be used.
  # ssl_protocols SSLv3 TLSv1.2 TLSv1.1 TLSv1;  
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # disables all weak ciphers
   ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
   ssl_prefer_server_ciphers on;
   ssl_session_cache shared:SSL:10m;

#  ssl_ciphers ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM;
#  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;

#  server_name www.exemple.com;

  ## Access and error logs.
#  access_log /var/log/nginx/access.log;
#  error_log  /var/log/nginx/error.log info;

  ## Keep alive timeout set to a greater value for SSL/TLS.
  keepalive_timeout 75 75;

  ## See the keepalive_timeout directive in nginx.conf.
  ## Server certificate and key.
  ssl on;
#  ssl_certificate /etc/ssl/certs/exemple-com-ssl-bundle.crt;
###  ssl_certificate /etc/ssl/certs/exemple-com.crt;
#  ssl_certificate_key /etc/ssl/private/exemple-com.key;
  ssl_session_timeout  5m;

  ## Strict Transport Security header for enhanced security. See
  ## http://www.chromium.org/sts. I've set it to 2 hours; set it to
  ## whichever age you want.
  add_header Strict-Transport-Security "max-age=7200";
    ## Your website name goes here.
    root /usr/share/nginx/html/web;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;
    
    ## This should be in your http block and if it is, it`s not needed here.
    index index.htm index.html index.php;
	client_max_body_size 100M;
#  	gzip on;
#	gzip_types text/css text/x-component application/x-javascript application/javascript text/javascript text/x-js text/richtext image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;

    location = /favicon.ico {
                log_not_found off;
                access_log off;
    }

    location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
     }
     location / {
                # This is cool because no php is touched for static content.
                # include the "?$args" part so non-default permalinks doesn't break when using query string
                try_files $uri $uri/ /index.php?$args;
     }

     location ~ \.php$ {
                #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                fastcgi_index  index.php;
    		    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    		    include        fastcgi_params;
                # include fastcgi.conf;
            	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
     }
	location ~* \.(ttf|ttc|otf|eot|woff|woff2|font.css)$ {
   		add_header Access-Control-Allow-Origin "*";
#		gzip_vary on;
	}
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                gzip_vary on;
		expires max;
                log_not_found off;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    # error_page   500 502 503 504  /50x.html;
    # location = /50x.html {
    #   root   /usr/share/nginx/html;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
	include	/usr/share/nginx/html/web/nginx.conf;
}
